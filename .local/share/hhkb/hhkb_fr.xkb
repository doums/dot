xkb_keymap {
xkb_keycodes "hkk" {
    minimum = 8;
    maximum = 255;
    <ESC> = 9;
    <AE01> = 10;
    <AE02> = 11;
    <AE03> = 12;
    <AE04> = 13;
    <AE05> = 14;
    <AE06> = 15;
    <AE07> = 16;
    <AE08> = 17;
    <AE09> = 18;
    <AE10> = 19;
    <AE11> = 20;
    <AE12> = 21;
    <BKSP> = 22;
    <TAB> = 23;
    <AD01> = 24;
    <AD02> = 25;
    <AD03> = 26;
    <AD04> = 27;
    <AD05> = 28;
    <AD06> = 29;
    <AD07> = 30;
    <AD08> = 31;
    <AD09> = 32;
    <AD10> = 33;
    <AD11> = 34;
    <AD12> = 35;
    <RTRN> = 36;
    <LCTL> = 37;
    <AC01> = 38;
    <AC02> = 39;
    <AC03> = 40;
    <AC04> = 41;
    <AC05> = 42;
    <AC06> = 43;
    <AC07> = 44;
    <AC08> = 45;
    <AC09> = 46;
    <AC10> = 47;
    <AC11> = 48;
    <TLDE> = 49;
    <LFSH> = 50;
    <BKSL> = 51;
    <AB01> = 52;
    <AB02> = 53;
    <AB03> = 54;
    <AB04> = 55;
    <AB05> = 56;
    <AB06> = 57;
    <AB07> = 58;
    <AB08> = 59;
    <AB09> = 60;
    <AB10> = 61;
    <RTSH> = 62;
    <KPMU> = 63;
    <LALT> = 64;
    <SPCE> = 65;
    <FK01> = 67;
    <FK02> = 68;
    <FK03> = 69;
    <FK04> = 70;
    <FK05> = 71;
    <FK06> = 72;
    <FK07> = 73;
    <FK08> = 74;
    <FK09> = 75;
    <FK10> = 76;
    <SCLK> = 78;
    <KPSU> = 82;
    <KPAD> = 86;
    <LVL3> = 92;
    <FK11> = 95;
    <FK12> = 96;
    <HENK> = 100;
    <MUHE> = 102;
    <KPEN> = 104;
    <KPDV> = 106;
    <PRSC> = 107;
    <RALT> = 108;
    <HOME> = 110;
    <UP> = 111;
    <PGUP> = 112;
    <LEFT> = 113;
    <RGHT> = 114;
    <END> = 115;
    <DOWN> = 116;
    <PGDN> = 117;
    <INS> = 118;
    <DELE> = 119;
    <MUTE> = 121;
    <VOL-> = 122;
    <VOL+> = 123;
    <POWR> = 124;
    <PAUS> = 127;
    <LWIN> = 133;
    <RWIN> = 134;
    <STOP> = 136;
    indicator 1 = "";
};

xkb_types "hkk" {

    virtual_modifiers Alt,NumLock,LevelThree;

    type "ONE_LEVEL" {
        modifiers= none;
        level_name[Level1]= "Any";
    };
    type "TWO_LEVEL" {
        modifiers= Shift;
        map[Shift]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
    };
    type "THREE_LEVEL" {
        modifiers= Shift+LevelThree;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Level3";
    };
    type "CTRL+ALT" {
        modifiers= Control+Alt;
        map[Control+Alt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Ctrl+Alt";
    };
    type "ALPHABETIC" {
        modifiers= Shift;
        map[Shift]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
    };
    type "KEYPAD" {
        modifiers= Shift+NumLock;
        map[Shift]= Level2;
        map[NumLock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Number";
    };
    type "CONTROL_LEVEL" {
        modifiers= Control;
        map[Control]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Control";
    };
    type "ALT_LEVEL" {
        modifiers= Alt;
        map[Alt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Alt";
    };
};

xkb_compatibility "hkk" {

    virtual_modifiers Alt,Super,AltGr,LevelThree;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;
    interpret.locking= False;

    interpret Alt_L+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Alt_R+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_L+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_R+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Alt_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Alt_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Super_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Super_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Shift_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret Any+Exactly(Lock) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+AnyOf(all) {
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret ISO_Level3_Shift+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level3_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret XF86Switch_VT_1+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=1,!same);
    };
    interpret XF86Switch_VT_2+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=2,!same);
    };
    interpret XF86Switch_VT_3+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=3,!same);
    };
    interpret XF86Switch_VT_4+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=4,!same);
    };
    interpret XF86Switch_VT_5+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=5,!same);
    };
    interpret XF86Switch_VT_6+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=6,!same);
    };
    interpret XF86Switch_VT_7+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=7,!same);
    };
    interpret XF86Switch_VT_8+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=8,!same);
    };
    interpret XF86Switch_VT_9+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=9,!same);
    };
    interpret XF86Switch_VT_10+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=10,!same);
    };
    interpret XF86Switch_VT_11+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=11,!same);
    };
    interpret XF86Switch_VT_12+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=12,!same);
    };
    group 2 = AltGr;
    group 3 = AltGr;
    group 4 = AltGr;
};

xkb_symbols "hkk" {

    name[group1]="Azerty FR";

    key <ESC> {[ Escape ]};
    key <AE01> {
        type= "THREE_LEVEL",
        [ ampersand, 1, onesuperior ]
    };
    key <AE02> {
        type= "THREE_LEVEL",
        [ eacute, 2, twosuperior ]
    };
    key <AE03> {
        type= "THREE_LEVEL",
        [ quotedbl, 3, numbersign ]
    };
    key <AE04> {
        type= "THREE_LEVEL",
        [ apostrophe, 4, braceleft ]
    };
    key <AE05> {
        type= "THREE_LEVEL",
        [ parenleft, 5, bracketleft ]
    };
    key <AE06> {
        type= "THREE_LEVEL",
        [ minus, 6, bar ]
    };
    key <AE07> {
        type= "THREE_LEVEL",
        [ egrave, 7, grave ]
    };
    key <AE08> {
        type= "THREE_LEVEL",
        [ underscore, 8, backslash ]
    };
    key <AE09> {
        type= "THREE_LEVEL",
        [ ccedilla, 9, asciicircum ]
    };
    key <AE10> {
        type= "THREE_LEVEL",
        [ agrave, 0, at ]
    };
    key <AE11> {
        type= "THREE_LEVEL",
        [ parenright, degree, bracketright ]
    };
    key <AE12> {
        type= "THREE_LEVEL",
        [ equal, plus, braceright ]
    };
    key <BKSP> {[ BackSpace ]};
    key <TAB> {[ Tab, ISO_Left_Tab ]};
    key <AD01> {[ a, A ]};
    key <AD02> {[ z, Z ]};
    key <AD03> {[ e, E ]};
    key <AD04> {[ r, R ]};
    key <AD05> {[ t, T ]};
    key <AD06> {[ y, Y ]};
    key <AD07> {[ u, U ]};
    key <AD08> {[ i, I ]};
    key <AD09> {[ o, O ]};
    key <AD10> {[ p, P ]};
    key <AD11> {[ dead_circumflex, dead_diaeresis ]};
    key <AD12> {[ dollar, sterling ]};
    key <RTRN> {[ Return ]};
    key <LCTL> {[ Control_L ]};
    key <AC01> {[ q, Q ]};
    key <AC02> {[ s, S ]};
    key <AC03> {[ d, D ]};
    key <AC04> {[ f, F ]};
    key <AC05> {[ g, G ]};
    key <AC06> {[ h, H ]};
    key <AC07> {[ j, J ]};
    key <AC08> {[ k, K ]};
    key <AC09> {[ l, L ]};
    key <AC10> {[ m, M ]};
    key <AC11> {[ ugrave, percent ]};
    key <TLDE> {[ asciitilde, asciicircum ]};
    key <LFSH> {[ Shift_L ]};
    key <BKSL> {[ asterisk, mu ]};
    key <AB01> {
        type= "THREE_LEVEL",
        [ w, W, less ]
    };
    key <AB02> {
        type= "THREE_LEVEL",
        [ x, X, greater ]
    };
    key <AB03> {[ c, C ]};
    key <AB04> {[ v, V ]};
    key <AB05> {[ b, B ]};
    key <AB06> {[ n, N ]};
    key <AB07> {[ comma, question ]};
    key <AB08> {[ semicolon, period ]};
    key <AB09> {[ colon, slash ]};
    key <AB10> {[ exclam, section ]};
    key <RTSH> {[ Shift_R ]};
    key <LALT> {[ Alt_L ]};
    key <SPCE> {[ space ]};
    key <FK01> {
        type= "CTRL+ALT",
        [ F1, XF86Switch_VT_1 ]
    };
    key <FK02> {
        type= "CTRL+ALT",
        [ F2, XF86Switch_VT_2 ]
    };
    key <FK03> {
        type= "CTRL+ALT",
        [ F3, XF86Switch_VT_3 ]
    };
    key <FK04> {
        type= "CTRL+ALT",
        [ F4, XF86Switch_VT_4 ]
    };
    key <FK05> {
        type= "CTRL+ALT",
        [ F5, XF86Switch_VT_5 ]
    };
    key <FK06> {
        type= "CTRL+ALT",
        [ F6, XF86Switch_VT_6 ]
    };
    key <FK07> {
        type= "CTRL+ALT",
        [ F7, XF86Switch_VT_7 ]
    };
    key <FK08> {
        type= "CTRL+ALT",
        [ F8, XF86Switch_VT_8 ]
    };
    key <FK09> {
        type= "CTRL+ALT",
        [ F9, XF86Switch_VT_9 ]
    };
    key <FK10> {
        type= "CTRL+ALT",
        [ F10, XF86Switch_VT_10 ]
    };
    key <FK11> {
        type= "CTRL+ALT",
        [ F11, XF86Switch_VT_11 ]
    };
    key <FK12> {
        type= "CTRL+ALT",
        [ F12, XF86Switch_VT_12 ]
    };
    key <SCLK> {[ Scroll_Lock ]};
    key <HENK> {[ Henkan_Mode ]};
    key <MUHE> {[ Muhenkan ]};
    key <PRSC> {
        type= "ALT_LEVEL",
        [ Print, Sys_Req ]
    };
    key <RALT> {[ ISO_Level3_Shift ]};
    key <HOME> {[ Home ]};
    key <UP> {[ Up ]};
    key <PGUP> {[ Prior ]};
    key <LEFT> {[ Left ]};
    key <RGHT> {[ Right ]};
    key <END> {[ End ]};
    key <DOWN> {[ Down ]};
    key <PGDN> {[ Next ]};
    key <INS> {[ Insert ]};
    key <DELE> {[ Delete ]};
    key <MUTE> {[ XF86AudioMute ]};
    key <VOL-> {[ XF86AudioLowerVolume ]};
    key <VOL+> {[ XF86AudioRaiseVolume ]};
    key <POWR> {[ XF86PowerOff ]};
    key <PAUS> {
        type= "CONTROL_LEVEL",
        [ Pause, Break ]
    };
    key <LWIN> {[ Super_L ]};
    key <RWIN> {[ Super_R ]};
    key <STOP> {[ Cancel ]};
    key <KPAD> {[ KP_Add ]};
    key <KPSU> {[ KP_Subtract ]};
    key <KPMU> {[ KP_Multiply ]};
    key <KPDV> {[ KP_Divide ]};
    key <KPEN> {[ KP_Enter ]};
    key <LVL3> {[ ISO_Level3_Shift ]};
    modifier_map Control { <LCTL> };
    modifier_map Shift { <LFSH> };
    modifier_map Shift { <RTSH> };
    modifier_map Mod1 { <LALT> };
    modifier_map Mod5 { <LVL3> };
    modifier_map Mod4 { <LWIN> };
    modifier_map Mod4 { <RWIN> };
};
};
