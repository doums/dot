-- Base
import XMonad

import XMonad.Util.EZConfig
import System.Exit
import qualified XMonad.StackSet as W

-- Data
import Data.Monoid
import qualified Data.Map as M

-- Actions
import XMonad.Actions.CycleWS
import XMonad.Actions.Navigation2D

-- Layouts
import XMonad.Layout.Spacing
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.PerWorkspace

-- Hooks
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.StatusBar
import XMonad.Hooks.StatusBar.PP
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.InsertPosition

-- Utils
import XMonad.Util.Cursor
import XMonad.Util.SpawnOnce
import qualified XMonad.Util.Hacks as Hacks

-- XF86 keys
import Graphics.X11.ExtraTypes.XF86

main :: IO ()
main = xmonad
     . docks
     . ewmhFullscreen
     . ewmh
     . withSB (statusBarProp "xmobar" (pure myXmobarPP))
     $ cfg

cfg = def {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = True,
        clickJustFocuses   = False,
        borderWidth        = 4,
        modMask            = mod4Mask,
        workspaces         = myWorkspaces,
        normalBorderColor  = darkGrey,
        focusedBorderColor = grey,
      -- key bindings
        -- mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }
    `additionalKeysP` (
      [("M-t",         spawn $ myTerminal)
      ,("M-!",         spawn "rofi -show drun")
      ,("M-w",         spawn "rofi -show window")
      ,("M-S-l",       spawn "lock.sh")
      ,("M-q",         spawn ("session.sh" ++ dmenuArgs))
      ,("M-C-q",       spawn "xmonad --recompile; xmonad --restart")
      ,("M-C-r",       refresh)
      ,("M-d",         spawn ("set_dp.sh" ++ dmenuArgs))
      ,("M-v",         spawn ("clipmenu -b -i -p '◧'" ++ dmenuArgs))
      ,("M-p",         spawn "restart_picom.sh")
      ,("M-*",         spawn "pkill -USR1 redshift")
      ,("Print",       spawn "screenshot.sh")
      ,("M-c",         spawn "clipshot.sh")
      ,("M-x",         kill)
      ,("M-<Space>",   sendMessage NextLayout)
      ,("M-j",         windows W.focusDown)
      ,("M-k",         windows W.focusUp)
      ,("M-m",         windows W.focusMaster)
      ,("M-<Return>",  windows W.swapMaster)
      ,("M-S-j",       windows W.swapDown)
      ,("M-S-k",       windows W.swapUp)
      ,("M-s",         toggleSmartSpacing)
      ,("M-f",         withFocused $ windows . W.sink)
      ,("M-<Left>",    prevWS)
      ,("M-<Right>",   nextWS)
      ,("M-S-<Left>",  shiftToPrev)
      ,("M-S-<Right>", shiftToNext)
      ,("M-h",         sendMessage Shrink)
      ,("M-l",         sendMessage Expand)
      ,("M-;",         sendMessage (IncMasterN 1))
      ,("M-,",         sendMessage (IncMasterN (-1)))
      ,("M-b",         spawn toggleXmobar)
      ,("<XF86MonBrightnessUp>",   spawn "pral.sh light_up")
      ,("<XF86MonBrightnessDown>", spawn "pral.sh light_down")
      ,("<XF86AudioRaiseVolume>",  spawn "pral.sh sink_up")
      ,("<XF86AudioLowerVolume>",  spawn "pral.sh sink_down")
      ,("<XF86AudioMute>",         spawn "pral.sh sink_mute")
      ,("<XF86AudioMicMute>",      spawn "pral.sh source_mute")]
      ++
      [(m ++ "M-" ++ [k], f i)
          | (i, k) <- zip myWorkspaces workspaceKeys
          , (f, m) <- [(windows . W.greedyView, ""), (windows . W.shift, "S-")]]
      ++
      [(m ++ "M-" ++ [k], screenWorkspace sc >>= flip whenJust f)
          | (k, sc) <- zip screenKeys [0..]
          , (f, m) <- [(windows . W.view, ""), (windows . W.shift, "S-")]]
    )

myTerminal = "alacritty"
myWorkspaces = ["1", "2", "3", "a", "z", "e", "4", "r", "5"]
workspaceKeys = "&é\"aze'r%"
screenKeys = "[]"


-- modMask lets you specify which modkey you want to use. The default
-- is mod1Mask ("left alt").  You may also consider using mod3Mask
-- ("right alt"), which does not conflict with emacs keybindings. The
-- "windows key" is usually mod4Mask.


-- colors
--
grey = "#404040"
darkGrey = "#262626"
nearBlack = "#0d0d0d"
stone = "#8c8c8c"

-- dmenu args
--
dmenuFn = "'JetBrains Mono:pixelsize=20:antialias=true'"
dDarkGrey = "\\#262626"
dNearBlack = "\\#0d0d0d"
dStone = "\\#8c8c8c"

dmenuArgs :: String
dmenuArgs = " -fn " ++ dmenuFn ++ " -nb " ++ dNearBlack ++ " -nf " ++ dStone ++ " -sb " ++ dDarkGrey ++ " -sf " ++ dStone

-- toggle xmobar command
--
toggleXmobar :: String
toggleXmobar = "dbus-send --session --dest=org.Xmobar.Control --type=method_call '/org/Xmobar/Control' org.Xmobar.Control.SendSignal 'string:Toggle 0'"

------------------------------------------------------------------------
-- Key bindings. Add, modify or remove key bindings here.
--
{- myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $

    --
    -- mod-[1..9], Switch to workspace N
    -- mod-shift-[1..9], Move client to workspace N
    --
    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) myWorkspaceKeys
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++

    --
    -- mod-{[,]} Switch to physical/Xinerama screens 1, 2
    -- mod-shift-{[,]}, Move client to screen 1, 2
    --
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_bracketleft, xK_bracketright] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]] -}

------------------------------------------------------------------------
-- Mouse bindings: default actions bound to mouse events
--
{- myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ] -}

------------------------------------------------------------------------
-- Layouts:

-- You can specify and transform your layouts by modifying these values.
-- If you change layout bindings be sure to use 'mod-shift-space' after
-- restarting (with 'mod-q') to reset your layout state to the new
-- defaults, as xmonad preserves your old layout settings by default.
--
-- The available layouts.  Note that each layout is separated by |||,
-- which denotes layout choice.
--
myLayout = renamed [CutWordsLeft 1]
           $ smartBorders
           $ avoidStruts
           $ spacingWithEdge 7
           $ tiled ||| mirror ||| full
  where
     tiled   = renamed [Replace "→"] (Tall nmaster delta ratio)
     mirror  = renamed [Replace "↓"] (Mirror tiled)
     full    = renamed [Replace "■"] Full

     -- The default number of windows in the master pane
     nmaster = 1

     -- Default proportion of screen occupied by master pane
     ratio   = 1/2

     -- Percent of screen to increment by when resizing panes
     delta   = 3/100

------------------------------------------------------------------------
-- Window rules:

-- Execute arbitrary actions and WindowSet manipulations when managing
-- a new window. You can use this to, for example, always float a
-- particular program, or have a client always appear on a particular
-- workspace.
--
-- To find the property name associated with a program, use
-- > xprop | grep WM_CLASS
-- and click on the client you're interested in.
--
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.
--
--
myManageHook = fmap not willFloat --> insertPosition Below Newer <+> composeAll
    [ className =? "Gimp"               --> doFloat
    , className =? "jetbrains-toolbox"  --> doIgnore
    , className =? "feh"                --> doFloat
    , className =? "Galculator"         --> doFloat
    , className =? "TeamSpeak 3"        --> doFloat
    , className =? "Insomnia"           --> doFloat
    , title     =? "win0"               --> doFloat
    , title     =? "Contrôle du volume" --> doFloat
    , resource  =? "desktop_window"     --> doIgnore ]

------------------------------------------------------------------------
-- Event handling

-- * EwmhDesktops users should change this to ewmhDesktopsEventHook
--
-- Defines a custom handler function for X Events. The function should
-- return (All True) if the default handler is to be run afterwards. To
-- combine event hooks use mappend or mconcat from Data.Monoid.
--
myEventHook = Hacks.trayerAboveXmobarEventHook

------------------------------------------------------------------------
-- Status bars and logging

-- Perform an arbitrary action on each internal state change or X event.
-- See the 'XMonad.Hooks.DynamicLog' extension for examples.
--
myLogHook = return ()

------------------------------------------------------------------------
-- Startup hook

-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
myStartupHook = do
    setDefaultCursor xC_left_ptr -- set default cursor
    spawnOnce "picom --config /home/pierre/.config/picom.conf -b"
    spawnOnce "redshift -c /home/pierre/.config/redshift/redshift.conf"
    spawnOnce "dunst -c /home/pierre/.config/dunst/dunstrc"
    spawnOnce "udiskie"
    -- spawnOnce "bato"
    spawnOnce "clipmenud"
    spawnOnce "trayer -l --align left --distancefrom left --distance 420 --monitor primary --widthtype request --height 28 --transparent true --alpha 0 --tint 0x262626 --expand true --iconspacing 4 --SetPartialStrut true --SetDockType true"

------------------------------------------------------------------------
-- xmobarPP

-- doc https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Hooks-StatusBar-PP.html
--
myXmobarPP :: PP
myXmobarPP = def
    { ppSep              = "  "
    , ppWsSep            = " "
    , ppCurrent          = stone . wrap (white "❱") ""
    , ppVisible          = stone . wrap "❯" ""
    , ppHidden           = stone . wrap (white "•") ""
    , ppHiddenNoWindows  = stone . wrap " " ""
    , ppVisibleNoWindows = Just $  stone . wrap "❯" ""
    , ppUrgent           = stone . wrap (red "⚡") ""
    , ppLayout           = white . wrap (stone "⌈") (stone "⌋")
    , ppOrder            = \[ws, l, w] -> [ws, l]
    , ppExtras           = []
    }
  where
    stone, red, white :: String -> String
    white    = xmobarColor "#ffffff" ""
    red      = xmobarColor "#bf616a" ""
    stone    = xmobarColor "#8c8c8c" ""


